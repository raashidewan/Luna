package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.modernrobotics.ModernRoboticsI2cGyro;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * Created by Raashi Dewan on 7/4/2017.
 */

@Autonomous(name = "Drive by gyro", group = "Sensors")
public class gyro_v1 extends LinearOpMode{
    
    public void runOpMode(){
        LunaHardware robot = new LunaHardware();
        int xVal, yVal, zVal = 0;     // Gyro rate Values
        int heading = 0;
        // The heading value of the gryo, where all angles are measured from the angle from where it was set to 0
        int angleZ = 0;
        boolean lastResetState = false;
        boolean curResetState  = false;
        ElapsedTime runtime = new ElapsedTime();
        double FORWARD_SPEED = 0.75;
        double BACKWARD_SPEED = -0.5;

        // start calibrating the gyro.
        telemetry.addData(">", "Gyro Calibrating. Do Not move!");
        telemetry.update();
        robot.gyro.calibrate();


        // make sure the gyro is calibrated.
        while (!isStopRequested() && robot.gyro.isCalibrating())  {
            sleep(50);
            idle();
        }

        telemetry.addData(">", "Gyro Calibrated.  Press Start.");
        telemetry.update();

        waitForStart();

        while(opModeIsActive()){
            angleZ = -robot.gyro.getIntegratedZValue();
            telemetry.addData("Angle: ", angleZ);
            telemetry.update();

            //drive straight for 2 seconds
            robot.leftMotor.setPower(FORWARD_SPEED);
            robot.rightMotor.setPower(FORWARD_SPEED);
            runtime.reset();
            while (opModeIsActive() && (runtime.seconds() < 2.0)) {
                telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
                telemetry.update();
            }

            //turn 90 degrees left (heading of -90 degrees)
            while(opModeIsActive() && angleZ > -90) {
                robot.leftMotor.setPower(BACKWARD_SPEED);
                robot.rightMotor.setPower(FORWARD_SPEED);
            }

            //drive straight for 2 seconds
            robot.leftMotor.setPower(FORWARD_SPEED);
            robot.rightMotor.setPower(FORWARD_SPEED);
            runtime.reset();
            while (opModeIsActive() && (runtime.seconds() < 2.0)) {
                telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
                telemetry.update();
            }

            //turn 90 degrees left (heading of +-180 degrees)
            while(opModeIsActive() && angleZ > -180) {
                robot.leftMotor.setPower(BACKWARD_SPEED);
                robot.rightMotor.setPower(FORWARD_SPEED);
            }

            //drive straight for 2 seconds
            robot.leftMotor.setPower(FORWARD_SPEED);
            robot.rightMotor.setPower(FORWARD_SPEED);
            runtime.reset();
            while (opModeIsActive() && (runtime.seconds() < 2.0)) {
                telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
                telemetry.update();
            }

            //turn 90 degrees left (heading of 90 degrees 0r -270)
            while(opModeIsActive() && angleZ > -270) {
                robot.leftMotor.setPower(BACKWARD_SPEED);
                robot.rightMotor.setPower(FORWARD_SPEED);
            }

            //drive straight for 2 seconds
            robot.leftMotor.setPower(FORWARD_SPEED);
            robot.rightMotor.setPower(FORWARD_SPEED);
            runtime.reset();
            while (opModeIsActive() && (runtime.seconds() < 2.0)) {
                telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
                telemetry.update();
            }
        }
    }
}
