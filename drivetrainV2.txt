package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;

/**
 * Created by Raashi Dewan on 8/13/2017.
 */

public class drivetrainV2 extends Hardware{

    public DcMotor left = null;
    public DcMotor right = null;
    public DcMotor front = null;
    public DcMotor back = null;

    double frontLastEncoder;
    double backLastEncoder;
    double leftLastEncoder;
    double rightLastEncoder;

    public drivetrainV2(){
        this.left = hwMap.dcMotor.get("left");
        this.right = hwMap.dcMotor.get("right");
        this.front = hwMap.dcMotor.get("front");
        this.back = hwMap.dcMotor.get("back");

        this.left.setPower(0);
        this.right.setPower(0);
        this.front.setPower(0);
        this.back.setPower(0);

        this.left.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        this.right.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        this.front.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        this.back.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        this.left.setDirection(DcMotor.Direction.REVERSE);
        this.right.setDirection(DcMotor.Direction.FORWARD);
        this.front.setDirection(DcMotor.Direction.FORWARD);
        this.back.setDirection(DcMotor.Direction.REVERSE);
    }

    /* Sets power to all wheel motors
    Inputs: double speed
    int direction: 0 = forward, 1 = backward, 2 = left, 3 = right
     */
    public void setPower(double speed, int direction){
        if(direction == 0){
            //forwards
            this.front.setPower(0);
            this.back.setPower(0);
            this.right.setPower(speed);
            this.left.setPower(speed);
        }
        else if(direction == 1){
            //backwards
            this.front.setPower(0);
            this.back.setPower(0);
            this.right.setPower(-speed);
            this.left.setPower(-speed);
        }
        else if(direction == 2){
            //left
            this.front.setPower(-speed);
            this.back.setPower(-speed);
            this.right.setPower(0);
            this.left.setPower(0);
        }
        else if(direction == 3){
            //right
            this.front.setPower(speed);
            this.back.setPower(speed);
            this.right.setPower(0);
            this.left.setPower(0);
        }
    }

    /*
    Inputs: speed
    int direction: 0 = left, 1 = right
     */
    public void pivot(double speed, int direction){
        if(direction == 0){
            //left
            this.front.setPower(speed);
            this.back.setPower(-speed);
            this.right.setPower(speed);
            this.left.setPower(-speed);
        }
        else if(direction == 1){
            //right
            this.front.setPower(-speed);
            this.back.setPower(speed);
            this.right.setPower(-speed);
            this.left.setPower(speed);
        }
    }

    public void resetEncoders(){
        this.front.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        this.back.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        this.right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        this.left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        this.frontLastEncoder = front.getCurrentPosition();
        this.backLastEncoder = back.getCurrentPosition();
        this.leftLastEncoder = left.getCurrentPosition();
        this.rightLastEncoder = right.getCurrentPosition();
    }

    /* Drive with encoders
    Inputs: distance in inches, direction of movement, speed
     */
    public void driveDistance(double distance, int direction, double speed){

        if(direction == 0){
            //forwards
            while(averageEncoderValue1() < distance){
                this.setPower(speed, 0);
            }
        }
        else if(direction == 1){
            //backwards
            while(averageEncoderValue1() < distance){
                this.setPower(speed, 1);
            }
        }
        else if(direction == 2){
            //left
            while(averageEncoderValue2() < distance){
                this.setPower(speed, 2);
            }
        }
        else if(direction == 3){
            //right
            while(averageEncoderValue2() < distance){
                this.setPower(speed, 3);
            }
        }
    }

    public double[] getEncoderValues(){
        double[] encoders = {this.front.getCurrentPosition() - this.frontLastEncoder, this.back.getCurrentPosition() - this.backLastEncoder,
                this.left.getCurrentPosition() - this.leftLastEncoder, this.right.getCurrentPosition() - this.rightLastEncoder};
        return encoders;
    }

    public double averageEncoderValue1(){
        double[] encoders = this.getEncoderValues();
        double average = Math.abs((encoders[0] + encoders[1]) / 2);
        //need positive values
        return average;
    }

    public double averageEncoderValue2(){
        double[] encoders = this.getEncoderValues();
        double average = Math.abs((encoders[2] + encoders[3]) / 2);
        //need positive values
        return average;
    }

    /*
    Stops robot
     */
    public void stopMotors(){
        this.front.setPower(0);
        this.back.setPower(0);
        this.right.setPower(0);
        this.left.setPower(0);
    }
}
